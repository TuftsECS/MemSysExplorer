Nsight Profilers Documentation
==============================

Nsight Compute (NCU) is used in MemSysExplorer to collect detailed **Hardware Performance Counter (HPC)** metrics on NVIDIA GPUs. This integration enables fine-grained insight into GPU memory hierarchy behavior, such as cache hit/miss rates, DRAM utilization, and kernel-level efficiency.

The profiling workflow in MemSysExplorer consists of two actions:

1. **Profiling (`profiling`)** – Runs the target application under `ncu`, collecting metrics specified in the config file.
2. **Metric Extraction (`extract_metrics`)** – Parses the `.ncu-rep` report and extracts relevant metrics for analysis.

When using `both`, profiling and extraction occur sequentially.

.. important::

   **MemSysExplorer GitHub Repository**

   Refer to the codebase for the latest update:: https://github.com/lpentecost/MemSys-Playground/tree/gpu-app/apps/ncu

   To learn more about license terms and third-party attribution, refer to the :doc:`../licensing` page.


Required Arguments
------------------

Profiler execution requires different arguments depending on the selected action:

.. code-block:: python

    @classmethod
    def required_profiling_args(cls):
        return ["executable", "level"]

    @classmethod
    def required_extract_args(cls, action):
        if action == "extract_metrics":
            return ["report_file"]
        else:
            return []

Supported Memory Levels
------------------------

When specifying the `--level` flag, MemSysExplorer currently supports the following memory regions for Nsight profiling:

.. list-table::
   :header-rows: 1
   :widths: 20 80

   * - **Level**
     - **Description**
   * - `l2`
     - L2 unified cache statistics (hit rate, miss rate, etc.)
   * - `dram`
     - DRAM-level global memory traffic (reads, writes, cycles)
   * - `custom`
     - User-defined metrics for custom experiments

.. note::

   Levels such as `l1` or `l3` are not supported by Nsight Compute in this release and will default to the `custom` configuration.

Example Usage
-------------

- **Run profiling:**

  .. code-block:: bash

     python main.py --profiler ncu --action profiling --level l2 --executable ./your_gpu_binary

- **Extract metrics from an existing report:**

  .. code-block:: bash

     python main.py --profiler ncu --action extract_metrics --report_file ./example.ncu-rep

- **Run both profiling and extraction:**

  .. code-block:: bash

     python main.py --profiler ncu --action both --level dram --executable ./your_gpu_binary

Configuration System
--------------------

Nsight Compute in MemSysExplorer uses a **two-part configuration system** for defining what metrics to collect and how to structure them:

1. **Metric Configuration (`settings.conf`)**
2. **Section File (`.section`) for Nsight Compute**

These files are automatically generated inside:

- `configs/` – Contains `[Metrics]` sections specifying which performance counters to collect.
- `sections/` – Defines `.section` files for Nsight Compute, dynamically constructed from your config.

If no config exists for a requested level, MemSysExplorer creates a default one.

**Example Config File (profilers/ncu/configs/l2_settings.conf):**

.. code-block:: ini

   [Metrics]
   L2 Cache Hit Rate = lts__t_sectors_hit_rate.pct
   L2 Cache Miss Rate = lts__t_sectors_miss_rate.pct

**Example Config File (profilers/ncu/configs/dram_settings.conf):**

.. code-block:: ini

   [Metrics]
   DRAM Reads = dram__bytes_read.sum
   DRAM Writes = dram__bytes_write.sum

**Custom Configuration**

You can extend or override any config by editing the `profilers/ncu/configs/custom_settings.conf` file and pointing to a custom level using `--level custom`.

Auto-generated section files will include these metrics and are used during Nsight execution to ensure correctness.

Sample Output
-------------

The output trace generated by Nsight Compute will follow the naming convention:

``{executable}.ncu-rep``

This file corresponds to the native Nsight Compute `.rep` output format, which stores a collection of GPU performance metrics gathered during kernel execution.

You can inspect this output using either of the following methods:

1. **Nsight Compute Command-Line Viewer**:
   Use the `ncu` command-line utility to open and analyze the `.rep` file directly:

   .. code-block:: bash

      ncu {executable}.ncu-rep

2. **MemSysExplorer Trace Extraction**:
   Convert the `.ncu-rep` file into a MemSysExplorer-compatible output format using the profiling interface:

   .. code-block:: bash

      python3 main.py --profiler ncu --action extract_metrics --report_file {executable}.ncu-rep

.. note::

   For more information on interpreting and visualizing `.ncu-rep` files, refer to the official Nsight Compute documentation:

   https://docs.nvidia.com/nsight-compute/


Checking Available Metrics
--------------------------

If you encounter missing or unsupported metrics for your GPU architecture, run:

.. code-block:: bash

   ncu --query-metrics

This lists all valid metric counters supported by your GPU. You can then update the appropriate `custom_settings.conf` with those values.

Additional Notes
----------------

- Nsight Compute must be installed and available in your system `PATH`.
- Generated `.ncu-rep` reports are stored in the working directory using the executable name as a prefix.
- Each execution will dynamically build a `.section` file in `sections/` for Nsight Compute to read.

Troubleshooting
---------------

1. **ncu not found:**
   Ensure `ncu` is installed and in your environment’s `PATH`. If needed, set `NCU_HOME`.

2. **Permission denied:**
   GPU counters may require elevated privileges. Refer to NVIDIA's docs on enabling non-root profiling.

3. **Missing config or section:**
   MemSysExplorer will attempt to regenerate missing configuration files if they don’t exist.


